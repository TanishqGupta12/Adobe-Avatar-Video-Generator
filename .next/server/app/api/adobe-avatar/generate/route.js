"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/adobe-avatar/generate/route";
exports.ids = ["app/api/adobe-avatar/generate/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fadobe-avatar%2Fgenerate%2Froute&page=%2Fapi%2Fadobe-avatar%2Fgenerate%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadobe-avatar%2Fgenerate%2Froute.ts&appDir=%2Fhome%2Fhipster%2FDesktop%2Fown%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fhome%2Fhipster%2FDesktop%2Fown&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":
/*!*******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fadobe-avatar%2Fgenerate%2Froute&page=%2Fapi%2Fadobe-avatar%2Fgenerate%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadobe-avatar%2Fgenerate%2Froute.ts&appDir=%2Fhome%2Fhipster%2FDesktop%2Fown%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fhome%2Fhipster%2FDesktop%2Fown&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _home_hipster_Desktop_own_app_api_adobe_avatar_generate_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/adobe-avatar/generate/route.ts */ \"(rsc)/./app/api/adobe-avatar/generate/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/adobe-avatar/generate/route\",\n        pathname: \"/api/adobe-avatar/generate\",\n        filename: \"route\",\n        bundlePath: \"app/api/adobe-avatar/generate/route\"\n    },\n    resolvedPagePath: \"/home/hipster/Desktop/own/app/api/adobe-avatar/generate/route.ts\",\n    nextConfigOutput,\n    userland: _home_hipster_Desktop_own_app_api_adobe_avatar_generate_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/adobe-avatar/generate/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZhZG9iZS1hdmF0YXIlMkZnZW5lcmF0ZSUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGYWRvYmUtYXZhdGFyJTJGZ2VuZXJhdGUlMkZyb3V0ZSZhcHBQYXRocz0mcGFnZVBhdGg9cHJpdmF0ZS1uZXh0LWFwcC1kaXIlMkZhcGklMkZhZG9iZS1hdmF0YXIlMkZnZW5lcmF0ZSUyRnJvdXRlLnRzJmFwcERpcj0lMkZob21lJTJGaGlwc3RlciUyRkRlc2t0b3AlMkZvd24lMkZhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPSUyRmhvbWUlMkZoaXBzdGVyJTJGRGVza3RvcCUyRm93biZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ2M7QUFDZ0I7QUFDN0Y7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGdIQUFtQjtBQUMzQztBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLFlBQVk7QUFDWixDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsUUFBUSxpRUFBaUU7QUFDekU7QUFDQTtBQUNBLFdBQVcsNEVBQVc7QUFDdEI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUN1SDs7QUFFdkgiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS12aWRlby1zdHVkaW8vP2E0MmUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiL2hvbWUvaGlwc3Rlci9EZXNrdG9wL293bi9hcHAvYXBpL2Fkb2JlLWF2YXRhci9nZW5lcmF0ZS9yb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvYWRvYmUtYXZhdGFyL2dlbmVyYXRlL3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvYWRvYmUtYXZhdGFyL2dlbmVyYXRlXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS9hZG9iZS1hdmF0YXIvZ2VuZXJhdGUvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCIvaG9tZS9oaXBzdGVyL0Rlc2t0b3Avb3duL2FwcC9hcGkvYWRvYmUtYXZhdGFyL2dlbmVyYXRlL3JvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MgfSA9IHJvdXRlTW9kdWxlO1xuY29uc3Qgb3JpZ2luYWxQYXRobmFtZSA9IFwiL2FwaS9hZG9iZS1hdmF0YXIvZ2VuZXJhdGUvcm91dGVcIjtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgc2VydmVySG9va3MsXG4gICAgICAgIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fadobe-avatar%2Fgenerate%2Froute&page=%2Fapi%2Fadobe-avatar%2Fgenerate%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadobe-avatar%2Fgenerate%2Froute.ts&appDir=%2Fhome%2Fhipster%2FDesktop%2Fown%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fhome%2Fhipster%2FDesktop%2Fown&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/adobe-avatar/generate/route.ts":
/*!************************************************!*\
  !*** ./app/api/adobe-avatar/generate/route.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/v4/classic/external.js\");\n/* harmony import */ var _lib_apis_adobe_avatar__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/apis/adobe-avatar */ \"(rsc)/./lib/apis/adobe-avatar.ts\");\n\n\n\nconst AdobeAvatarSchema = zod__WEBPACK_IMPORTED_MODULE_2__.object({\n    inputType: zod__WEBPACK_IMPORTED_MODULE_2__[\"enum\"]([\n        \"text\",\n        \"textFile\",\n        \"audio\"\n    ]).default(\"text\"),\n    prompt: zod__WEBPACK_IMPORTED_MODULE_2__.string().optional(),\n    avatarId: zod__WEBPACK_IMPORTED_MODULE_2__.string().min(1, \"Avatar ID is required\"),\n    voiceId: zod__WEBPACK_IMPORTED_MODULE_2__.string().optional(),\n    localeCode: zod__WEBPACK_IMPORTED_MODULE_2__.string().default(\"en-US\"),\n    backgroundType: zod__WEBPACK_IMPORTED_MODULE_2__[\"enum\"]([\n        \"color\",\n        \"transparent\",\n        \"image\",\n        \"video\"\n    ]).optional(),\n    backgroundColor: zod__WEBPACK_IMPORTED_MODULE_2__.string().optional(),\n    backgroundUrl: zod__WEBPACK_IMPORTED_MODULE_2__.string().optional(),\n    userId: zod__WEBPACK_IMPORTED_MODULE_2__.string().optional(),\n    // Text file input\n    textFileUrl: zod__WEBPACK_IMPORTED_MODULE_2__.string().optional(),\n    // Audio input\n    audioFileUrl: zod__WEBPACK_IMPORTED_MODULE_2__.string().optional(),\n    audioFormat: zod__WEBPACK_IMPORTED_MODULE_2__[\"enum\"]([\n        \"audio/wav\",\n        \"audio/mp3\",\n        \"audio/m4a\"\n    ]).optional(),\n    // Output format\n    outputFormat: zod__WEBPACK_IMPORTED_MODULE_2__[\"enum\"]([\n        \"video/mp4\",\n        \"video/webm\"\n    ]).default(\"video/mp4\")\n}).refine((data)=>{\n    // Validate based on input type\n    if (data.inputType === \"text\") {\n        return data.prompt && data.voiceId;\n    } else if (data.inputType === \"textFile\") {\n        return data.textFileUrl && data.voiceId;\n    } else if (data.inputType === \"audio\") {\n        return data.audioFileUrl;\n    }\n    return false;\n}, {\n    message: \"Invalid input parameters for the specified input type\"\n});\nasync function POST(request) {\n    try {\n        const body = await request.json();\n        const validatedData = AdobeAvatarSchema.parse(body);\n        const adobeAPI = new _lib_apis_adobe_avatar__WEBPACK_IMPORTED_MODULE_1__.AdobeAvatarAPI({\n            clientId: process.env.ADOBE_CLIENT_ID || \"\",\n            clientSecret: process.env.ADOBE_CLIENT_SECRET || \"\"\n        });\n        // Check if we're in demo mode\n        const isDemoMode = false // Using real Adobe credentials\n        ;\n        if (isDemoMode) {\n            console.log(\"Running in demo mode - Adobe credentials not configured\");\n        }\n        let result;\n        switch(validatedData.inputType){\n            case \"text\":\n                result = await adobeAPI.generateFromText({\n                    text: validatedData.prompt,\n                    avatarId: validatedData.avatarId,\n                    voiceId: validatedData.voiceId,\n                    localeCode: validatedData.localeCode,\n                    backgroundType: validatedData.backgroundType,\n                    backgroundColor: validatedData.backgroundColor,\n                    backgroundUrl: validatedData.backgroundUrl,\n                    outputFormat: validatedData.outputFormat\n                });\n                break;\n            case \"textFile\":\n                result = await adobeAPI.generateFromTextFile({\n                    textFileUrl: validatedData.textFileUrl,\n                    avatarId: validatedData.avatarId,\n                    voiceId: validatedData.voiceId,\n                    localeCode: validatedData.localeCode,\n                    backgroundType: validatedData.backgroundType,\n                    backgroundColor: validatedData.backgroundColor,\n                    backgroundUrl: validatedData.backgroundUrl,\n                    outputFormat: validatedData.outputFormat\n                });\n                break;\n            case \"audio\":\n                result = await adobeAPI.generateFromAudio({\n                    audioFileUrl: validatedData.audioFileUrl,\n                    avatarId: validatedData.avatarId,\n                    audioFormat: validatedData.audioFormat,\n                    localeCode: validatedData.localeCode,\n                    backgroundType: validatedData.backgroundType,\n                    backgroundColor: validatedData.backgroundColor,\n                    backgroundUrl: validatedData.backgroundUrl,\n                    outputFormat: validatedData.outputFormat\n                });\n                break;\n            default:\n                throw new Error(\"Invalid input type\");\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            data: {\n                jobId: result.jobId,\n                status: result.status,\n                message: isDemoMode ? \"Adobe Avatar API not accessible, using demo mode (credentials configured)\" : \"Adobe Avatar video generation started successfully\",\n                demoMode: isDemoMode,\n                hasCredentials: true\n            }\n        });\n    } catch (error) {\n        console.error(\"Adobe Avatar generation error:\", error);\n        if (error instanceof zod__WEBPACK_IMPORTED_MODULE_2__.ZodError) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: \"Validation error\",\n                details: error.issues || []\n            }, {\n                status: 400\n            });\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: \"Internal server error\",\n            message: error instanceof Error ? error.message : \"Unknown error\"\n        }, {\n            status: 500\n        });\n    }\n}\nasync function GET(request) {\n    try {\n        const { searchParams } = new URL(request.url);\n        const jobId = searchParams.get(\"jobId\");\n        const statusUrl = searchParams.get(\"statusUrl\");\n        if (!jobId && !statusUrl) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: \"Either Job ID or Status URL is required\"\n            }, {\n                status: 400\n            });\n        }\n        const adobeAPI = new _lib_apis_adobe_avatar__WEBPACK_IMPORTED_MODULE_1__.AdobeAvatarAPI({\n            clientId: process.env.ADOBE_CLIENT_ID,\n            clientSecret: process.env.ADOBE_CLIENT_SECRET\n        });\n        let result;\n        if (statusUrl) {\n            // Use the status URL directly (more reliable)\n            result = await adobeAPI.getJobStatusByUrl(statusUrl);\n        } else {\n            // Use job ID to construct the status endpoint\n            result = await adobeAPI.getJobStatus(jobId);\n        }\n        const isDemoMode = false // Using real Adobe credentials\n        ;\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            data: {\n                ...result,\n                demoMode: isDemoMode,\n                hasCredentials: true\n            }\n        });\n    } catch (error) {\n        console.error(\"Get Adobe Avatar job status error:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: \"Internal server error\",\n            message: error instanceof Error ? error.message : \"Unknown error\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/adobe-avatar/generate/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/apis/adobe-avatar.ts":
/*!**********************************!*\
  !*** ./lib/apis/adobe-avatar.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AdobeAvatarAPI: () => (/* binding */ AdobeAvatarAPI)\n/* harmony export */ });\nclass AdobeAvatarAPI {\n    constructor(config){\n        this.baseUrl = \"https://audio-video-api.adobe.io/v1\";\n        this.cachedToken = null;\n        this.config = {\n            clientId: config.clientId || process.env.ADOBE_CLIENT_ID || \"\",\n            clientSecret: config.clientSecret || process.env.ADOBE_CLIENT_SECRET || \"\"\n        };\n    }\n    async getAccessToken() {\n        if (this.cachedToken && Date.now() < this.cachedToken.expiry) {\n            return this.cachedToken.accessToken;\n        }\n        const url = \"https://ims-na1.adobelogin.com/ims/token/v3\";\n        const { clientId, clientSecret } = this.config;\n        if (!clientId || !clientSecret) {\n            throw new Error(\"Adobe client ID or client secret is not configured\");\n        }\n        const params = new URLSearchParams();\n        params.append(\"grant_type\", \"client_credentials\");\n        params.append(\"client_id\", clientId);\n        params.append(\"client_secret\", clientSecret);\n        params.append(\"scope\", \"openid,AdobeID,firefly_enterprise\");\n        try {\n            const response = await fetch(url, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/x-www-form-urlencoded\"\n                },\n                body: params\n            });\n            if (!response.ok) {\n                throw new Error(`Failed: ${response.status} ${response.statusText}`);\n            }\n            const data = await response.json();\n            // console.log(data);\n            // console.log(\"✅ Adobe Access Token acquired\");\n            // return data.access_token as string;\n            this.cachedToken = {\n                accessToken: data.access_token,\n                expiry: Date.now() + data.expires_in * 1000 // use Adobe's expiry\n            };\n            return this.cachedToken.accessToken;\n        } catch (error) {\n            console.error(\"❌ Error fetching Adobe access token:\", error.message);\n            return null;\n        }\n    }\n    async makeRequest(endpoint, options = {}) {\n        const token = await this.getAccessToken();\n        // console.log(token);\n        const avat = \"https://audio-video-api.adobe.io/v1/\";\n        const response = await fetch(`${avat}${endpoint}`, {\n            ...options,\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": `Bearer ${token}`,\n                \"x-api-key\": this.config.clientId,\n                ...options.headers\n            }\n        });\n        if (!response.ok) {\n            const error = await response.text();\n            let errorMessage = `Adobe API Error: ${response.status} - ${error}`;\n            // Provide more specific error messages for common issues\n            if (response.status === 422) {\n                try {\n                    const errorData = JSON.parse(error);\n                    if (errorData.error_code === \"validation_error\") {\n                        errorMessage = `Adobe API Validation Error: ${errorData.message || error}`;\n                    }\n                } catch (parseError) {\n                // If we can't parse the error, use the original message\n                }\n            } else if (response.status === 404) {\n                errorMessage = `Adobe API Error: Resource not found (404) - The requested job or endpoint may not exist. Error: ${error}`;\n            }\n            throw new Error(errorMessage);\n        }\n        return response.json();\n    }\n    async generateAvatarVideo(request) {\n        if (!this.config.clientId || !this.config.clientSecret) {\n            throw new Error(\"Adobe credentials not configured\");\n        }\n        console.log(request);\n        const token = await this.getAccessToken();\n        const baseUrl = \"https://audio-video-api.adobe.io/v1\";\n        try {\n            const response = await fetch(`${baseUrl}/generate-avatar`, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"Authorization\": `Bearer ${token}`,\n                    \"x-api-key\": this.config.clientId\n                },\n                body: JSON.stringify(request)\n            });\n            if (!response.ok) {\n                const errText = await response.text();\n                throw new Error(`Adobe API failed: ${response.status} - ${response.statusText}\\n${errText}`);\n            }\n            const job = await response.json();\n            console.log(\"Job started:\", job);\n            return job;\n        } catch (error) {\n            console.error(\"Adobe API failed:\", error);\n            throw new Error(\"Adobe Avatar API not accessible\");\n        }\n    }\n    // Generate video from text input\n    async generateFromText(params) {\n        // Sanitize text input to remove unsupported characters\n        const sanitizedText = this.sanitizeText(params.text);\n        const request = {\n            script: {\n                text: sanitizedText,\n                mediaType: \"text/plain\",\n                localeCode: params.localeCode || \"en-US\"\n            },\n            voiceId: params.voiceId,\n            avatarId: params.avatarId,\n            output: {\n                mediaType: params.outputFormat || \"video/mp4\"\n            }\n        };\n        // Add background configuration if provided\n        if (params.backgroundType) {\n            request.output.background = {\n                type: params.backgroundType\n            };\n            if (params.backgroundType === \"color\" && params.backgroundColor) {\n                request.output.background.color = params.backgroundColor;\n            } else if ((params.backgroundType === \"image\" || params.backgroundType === \"video\") && params.backgroundUrl) {\n                request.output.background.source = {\n                    url: params.backgroundUrl\n                };\n            }\n        }\n        return this.generateAvatarVideo(request);\n    }\n    // Generate video from text file\n    async generateFromTextFile(params) {\n        const request = {\n            script: {\n                source: {\n                    url: params.textFileUrl\n                },\n                mediaType: \"text/plain\",\n                localeCode: params.localeCode || \"en-US\"\n            },\n            voiceId: params.voiceId,\n            avatarId: params.avatarId,\n            output: {\n                mediaType: params.outputFormat || \"video/mp4\"\n            }\n        };\n        // Add background configuration if provided\n        if (params.backgroundType) {\n            request.output.background = {\n                type: params.backgroundType\n            };\n            if (params.backgroundType === \"color\" && params.backgroundColor) {\n                request.output.background.color = params.backgroundColor;\n            } else if ((params.backgroundType === \"image\" || params.backgroundType === \"video\") && params.backgroundUrl) {\n                request.output.background.source = {\n                    url: params.backgroundUrl\n                };\n            }\n        }\n        return this.generateAvatarVideo(request);\n    }\n    // Generate video from audio file\n    async generateFromAudio(params) {\n        const request = {\n            audio: {\n                source: {\n                    url: params.audioFileUrl\n                },\n                mediaType: params.audioFormat || \"audio/wav\",\n                localeCode: params.localeCode || \"en-US\"\n            },\n            avatarId: params.avatarId,\n            output: {\n                mediaType: params.outputFormat || \"video/mp4\"\n            }\n        };\n        // Add background configuration if provided\n        if (params.backgroundType) {\n            request.output.background = {\n                type: params.backgroundType\n            };\n            if (params.backgroundType === \"color\" && params.backgroundColor) {\n                request.output.background.color = params.backgroundColor;\n            } else if ((params.backgroundType === \"image\" || params.backgroundType === \"video\") && params.backgroundUrl) {\n                request.output.background.source = {\n                    url: params.backgroundUrl\n                };\n            }\n        }\n        return this.generateAvatarVideo(request);\n    }\n    async getJobStatus(jobId) {\n        if (!this.config.clientId || !this.config.clientSecret || this.config.clientId === \"\") {\n            throw new Error(\"Adobe credentials not configured\");\n        }\n        if (!jobId || typeof jobId !== \"string\" || jobId.trim() === \"\") {\n            throw new Error(\"Invalid job ID provided\");\n        }\n        console.log(`Checking job status for jobId: ${jobId}`);\n        const token = await this.getAccessToken();\n        try {\n            // Use the correct Adobe Audio Video API status endpoint\n            const endpoint = `${this.baseUrl}/status/${jobId}`;\n            const result = await fetch(endpoint, {\n                method: \"GET\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"Authorization\": `Bearer ${token}`,\n                    \"x-api-key\": this.config.clientId\n                }\n            });\n            if (!result.ok) {\n                console.log(`Adobe API returned status ${result.status}`);\n                if (result.status === 404) {\n                    // Job might not be ready yet or doesn't exist\n                    return {\n                        jobId,\n                        status: \"processing\"\n                    };\n                }\n                throw new Error(`Adobe API Error: ${result.status} - ${result.statusText}`);\n            }\n            const data = await result.json();\n            console.log(`Job status response for ${jobId}:`, data);\n            return data;\n        } catch (error) {\n            console.log(\"Adobe API failed:\", error);\n            return {\n                jobId,\n                status: \"processing\"\n            };\n        }\n    }\n    async getJobStatusByUrl(statusUrl) {\n        if (!this.config.clientId || !this.config.clientSecret || this.config.clientId === \"\") {\n            throw new Error(\"Adobe credentials not configured\");\n        }\n        if (!statusUrl || typeof statusUrl !== \"string\" || statusUrl.trim() === \"\") {\n            throw new Error(\"Invalid status URL provided\");\n        }\n        console.log(`Checking job status using statusUrl: ${statusUrl}`);\n        const token = await this.getAccessToken();\n        try {\n            const result = await fetch(statusUrl, {\n                method: \"GET\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"Authorization\": `Bearer ${token}`,\n                    \"x-api-key\": this.config.clientId\n                }\n            });\n            if (!result.ok) {\n                console.log(`Adobe API returned status ${result.status}`);\n                if (result.status === 404) {\n                    // Job might not be ready yet or doesn't exist\n                    const jobId = statusUrl.split(\"/\").pop() || \"unknown\";\n                    return {\n                        jobId,\n                        status: \"processing\"\n                    };\n                }\n                throw new Error(`Adobe API Error: ${result.status} - ${result.statusText}`);\n            }\n            const data = await result.json();\n            console.log(`Job status response from URL:`, data);\n            return data;\n        } catch (error) {\n            console.log(\"Adobe API failed:\", error);\n            const jobId = statusUrl.split(\"/\").pop() || \"unknown\";\n            return {\n                jobId,\n                status: \"processing\"\n            };\n        }\n    }\n    getDemoJobStatus(jobId) {\n        // Return processing status - no demo video URLs\n        return {\n            jobId,\n            status: \"processing\"\n        };\n    }\n    sanitizeText(text) {\n        // Remove emojis and special symbols that Adobe API doesn't support\n        return text// Remove common emojis and symbols\n        .replace(/[\\u2600-\\u26FF]/g, \"\") // Miscellaneous symbols\n        .replace(/[\\u2700-\\u27BF]/g, \"\") // Dingbats\n        .replace(/[\\uD83C-\\uD83D][\\uDC00-\\uDFFF]/g, \"\") // Emoticons and symbols\n        .replace(/[\\uD83E][\\uDD00-\\uDDFF]/g, \"\") // Supplemental symbols\n        // Remove other special characters\n        .replace(/[^\\w\\s.,!?;:'\"()-]/g, \"\") // Keep only alphanumeric, spaces, and basic punctuation\n        // Clean up multiple spaces\n        .replace(/\\s+/g, \" \")// Trim whitespace\n        .trim();\n    }\n    async getAvatars() {\n        try {\n            const response = await this.makeRequest(\"/avatars\");\n            const avatars = response?.data;\n            if (avatars && Array.isArray(avatars) && avatars.length > 0) {\n                return avatars.map((avatar)=>({\n                        id: avatar.avatarId,\n                        name: avatar.displayName,\n                        description: `${avatar.clothingStyle} ${avatar.ageGroup} ${avatar.ethnicity}`,\n                        thumbnail: avatar.thumbnailUrls?.lowRes || avatar.thumbnailUrls?.hd || \"\",\n                        gender: avatar.gender.toLowerCase(),\n                        age: avatar.ageGroup,\n                        ethnicity: avatar.ethnicity\n                    }));\n            }\n            return response;\n        } catch (error) {\n            console.error(\"Error fetching avatars:\", error);\n            return [];\n        }\n    }\n    async getVoices() {\n        try {\n            const response = await this.makeRequest(\"/voices\");\n            // Handle different response structures from Adobe API\n            let voicesData = response;\n            // If response has a data property, use that\n            if (response && response.data && Array.isArray(response.data)) {\n                voicesData = response.data;\n            } else if (response && Array.isArray(response)) {\n                voicesData = response;\n            } else if (response && response.voices && Array.isArray(response.voices)) {\n                voicesData = response.voices;\n            } else {\n                console.log(\"Unexpected voices response structure:\", response);\n                return [];\n            }\n            // Map Adobe voice data to our interface\n            if (voicesData && Array.isArray(voicesData) && voicesData.length > 0) {\n                return voicesData.map((voice)=>({\n                        voiceId: voice.voiceId,\n                        displayName: voice.displayName || voice.name || \"Unknown Voice\",\n                        style: voice.style || voice.accent || \"Standard\",\n                        gender: voice.gender || \"unknown\",\n                        language: voice.language || \"en-US\",\n                        accent: voice.accent || voice.region || \"Standard\",\n                        sampleURL: voice.sampleURL || null\n                    }));\n            }\n            return [];\n        } catch (error) {\n            console.error(\"Error fetching voices:\", error);\n            return [];\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/apis/adobe-avatar.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/zod"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fadobe-avatar%2Fgenerate%2Froute&page=%2Fapi%2Fadobe-avatar%2Fgenerate%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadobe-avatar%2Fgenerate%2Froute.ts&appDir=%2Fhome%2Fhipster%2FDesktop%2Fown%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fhome%2Fhipster%2FDesktop%2Fown&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();